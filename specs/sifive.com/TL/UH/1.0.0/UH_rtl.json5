{
  abstractionDefinition: {
    vendor: 'sifive.com',
    library: 'TL',
    name: 'UH_rtl',
    version: '1.0.0',
    busType: {
      vendor: 'sifive.com',
      library: 'TL',
      name: 'UH',
      version: '1.0.0'
    },
    ports: {
      clk: {
        description: 'clock',
        wire: {
          isClock: true,
          onInitiator: {direction: 'in', width: 1},
          onTarget:  {direction: 'in', width: 1}
        }
      },
      /* Channel A
        flows from master interface to slave interface, carrying request
        messages sent to a particular address. This channel is used by all
        TileLink conformance levels and is mandatory.
      */
      a_opcode: {
        description: 'Operation code. Identifies the type of message carried by the channel.',
        wire: {
          onInitiator: {direction: 'out', width: 3},
          onTarget:  {direction: 'in',  width: 3}
        }
      },
      a_param: {
        description: 'Parameter code. Meaning depends on a_opcode; specifies a transfer of caching permissions or a sub-opcode.',
        wire: {
          onInitiator: {direction: 'out', width: 3},
          onTarget:  {direction: 'in',  width: 3}
        }
      },
      a_size: {
        description: 'Logarithm of the operation size: 2^n bytes.',
        wire: {
          onInitiator: {direction: 'out', /* width: 'z' */},
          onTarget:  {direction: 'in',  /* width: 'z' */}
        }
      },
      a_source: {
        description: 'Per-link master source identifier.',
        wire: {
          onInitiator: {direction: 'out', /* width: 'o' */},
          onTarget:  {direction: 'in',  /* width: 'o' */}
        }
      },
      a_address: {
        description: 'Target byte address of the operation. Must be aligned to a_size.',
        wire: {
          isAddress: true,
          onInitiator: {direction: 'out', /* width: 'a' */},
          onTarget:  {direction: 'in',  /* width: 'a' */}
        }
      },
      a_mask: {
        description: 'Byte lane select for messages with data.',
        wire: {
          onInitiator: {direction: 'out', /* width: 'w' */},
          onTarget:  {direction: 'in',  /* width: 'w' */}
        }
      },
      a_data: {
        description: 'Data payload for messages with data.',
        wire: {
          isData: true,
          onInitiator: {direction: 'out', /* width: '8 * w' */},
          onTarget:  {direction: 'in',  /* width: '8 * w' */}
        }
      },
      a_corrupt: {
        description: 'The data in this beat is corrupt.',
        wire: {
          onInitiator: {direction: 'out', width: 1},
          onTarget:  {direction: 'in',  width: 1}
        }
      },
      a_valid: {
        description: 'The sender is offering progress on an operation.',
        wire: {
          onInitiator: {direction: 'out', width: 1, presence: 'required'},
          onTarget:  {direction: 'in',  width: 1, presence: 'required'}
        }
      },
      a_ready: {
        description: 'The receiver accepted the offered progress.',
        wire: {
          onInitiator: {direction: 'in',  width: 1},
          onTarget:  {direction: 'out', width: 1}
        }
      },
      /* Channel D
        flows from slave interface to master interface. It carries response
        messages for Channel A requests sent to a particular address. It also
        carries acknowledgements for Channel C voluntary writebacks. This
        channel is used by all TileLink conformance levels and is non-optional.
      */
      d_opcode: {
        description: 'Operation code. Identifies the type of message carried by the channel.',
        wire: {
          onInitiator: {direction: 'in',  width: 3},
          onTarget:  {direction: 'out', width: 3}
        }
      },
      d_param: {
        description: 'Parameter code. Meaning depends on d_opcode; specifies permissions to transfer or a sub-opcode.',
        wire: {
          onInitiator: {direction: 'in',  width: 2},
          onTarget:  {direction: 'out', width: 2}
        }
      },
      d_size: {
        description: 'Logarithm of the operation size: 2^n bytes.',
        wire: {
          onInitiator: {direction: 'in',  /* width: 'z' */},
          onTarget:  {direction: 'out', /* width: 'z' */}
        }
      },
      d_source: {
        description: 'Per-link master source identifier.',
        wire: {
          onInitiator: {direction: 'in',  /* width: 'o' */},
          onTarget:  {direction: 'out', /* width: 'o' */}
        }
      },
      d_denied: {
        description: 'The slave was unable to service the request.',
        wire: {
          onInitiator: {direction: 'in',  width: 1},
          onTarget:  {direction: 'out', width: 1}
        }
      },
      d_data: {
        description: 'Data payload for messages with data.',
        wire: {
          isData: true,
          onInitiator: {direction: 'in',  /* width: '8 * w' */},
          onTarget:  {direction: 'out', /* width: '8 * w' */}
        }
      },
      d_corrupt: {
        description: 'Corruption was detected in the data payload.',
        wire: {
          onInitiator: {direction: 'in',  width: 1},
          onTarget:  {direction: 'out', width: 1}
        }
      },
      d_valid: {
        description: 'The sender is offering progress on an operation.',
        wire: {
          onInitiator: {direction: 'in',  width: 1, presence: 'required'},
          onTarget:  {direction: 'out', width: 1, presence: 'required'}
        }
      },
      d_ready: {
        description: 'The receiver accepted the offered progress.',
        wire: {
          onInitiator: {direction: 'out', width: 1},
          onTarget:  {direction: 'in',  width: 1}
        }
      }
    }
  }
}
