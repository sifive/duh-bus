{
  abstractionDefinition: {
    vendor: 'intel.com',
    library: 'PHY',
    name: 'PIPE_rtl',
    version: '4.4.0',
    busType: {
      vendor: 'intel.com',
      library: 'PHY',
      name: 'PIPE',
      version: '4.4.0',
    },
    ports: {
      PCLK: {
        description: 'Parallel interface clock',
        wire: {
          isClock: true,
          onMaster: {width: 1, direction: 'in'},
          onSlave:  {width: 1, direction: 'out'},
          requiresDriver: true,
        },
      },

      // PIPE Common to all lanes
      RESETN: {
        description: 'Resets the transmitter and receiver.',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      POWERDOWN: {
        description: 'Forces TX output to electrical idle',
        wire: {
          onMaster: {width: 2, direction: 'out'},
          onSlave:  {width: 2, direction: 'in'}
        },
      },
      RATE: {
        description: 'Link signalling rate',
        wire: {
          onMaster: {width: 2, direction: 'out'},
          onSlave:  {width: 2, direction: 'in'}
        },
      },
      TXMARGIN: {
        description: 'Selects transmitter voltage level',
        wire: {
          onMaster: {width: 3, direction: 'out'},
          onSlave:  {width: 3, direction: 'in'},
          defaultValue: 0
        },
      },
      TXSWING: {
        description: 'Transmitter voltage swing level',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      BLKALNCTRL: {
        description: 'Block align control, controls whether the PHY performs block alignment',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      WIDTH: {
        description: 'Controls the PIPE datapath width',
        wire: {
          onMaster: {width: 2, direction: 'out'},
          onSlave:  {width: 2, direction: 'in'}
        },
      },
      PCLKRATE: {
        description: 'Controls the PIPE PCLK rate',
        wire: {
          onMaster: {width: 3, direction: 'out'},
          onSlave:  {width: 3, direction: 'in'}
        },
      },

      // Per-lane
      TXDATA: {
        description: 'Parallel data input bus',
        wire: {
          isData: true,
          onMaster: {direction: 'out', presence: 'required'},
          onSlave:  {direction: 'in',  presence: 'required'}
        },
      },
      TXDATAVALID: {
        description: 'Parallel data valid signal',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      RXDATA: {
        description: 'Parallel data output bus',
        wire: {
          isData: true,
          onMaster: {direction: 'in',  presence: 'required'},
          onSlave:  {direction: 'out', presence: 'required'}
        },
      },
      PHYMODE: {
        description: 'PHY operating mode',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in' }
        },
      },
      SRISEN: {
        description: 'Used to tell the PHY to configure itselff to support SRIS ',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in' }
        },
      },
      TXDETRXLPBK: {
        description: 'Used to tell the PHY to begin receiver detection or loopback ',
        wire: {
          onMaster: {direction: 'out', presence: 'required'},
          onSlave:  {direction: 'in',  presence: 'required'}
        },
      },
      TXELECIDLE: {
        description: 'Forces TX output to electrical idle',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in' }
        },
      },
      RXTERM: {
        description: 'Controls presence of receiver terminations',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in' }
        },
      },
      RXSTANDBY: {
        description: 'Controls whether the PHY RX is active when the PHY is in P0 or POs',
        wire: {
          onMaster: {direction:'out'},
          onSlave:  {direction:'in'}
        },
      },
      RXPOLARITY: {
        description: 'Tells PHY to invert the received data polarity',
        wire: {
          onMaster: {direction:'out'},
          onSlave: {direction:'in'}
        },
      },
      RXSTANDBYST: {
        description: 'Indicateds PHY RX Standby state',
        wire: {
          onMaster: {direction: 'in' },
          onSlave:  {direction: 'out'}
        },
      },
      PCLKCHNGACK: {
        description: 'Asserted by the MAC when a PCLK rate change is complete and stable',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in' }
        },
      },
      ASYNCPWRCHNGACK: {
        description: 'After the PHY asserts PhyStatus, the MAC responds with this',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in' }
        },
      },
      RXVALID: {
        description: 'Parallel data valid signal',
        wire: {
          onMaster: {direction:'in',  presence: 'required'},
          onSlave:  {direction:'out', presence: 'required'}
        },
      },
      PHYSTATUS: {
        description: 'Used to communicate completion of several PHY functions',
        wire: {
          onMaster: {direction: 'in',  presence: 'required'},
          onSlave:  {direction: 'out', presence: 'required'}
        },
      },
      RXELECIDLE: {
        description: 'Indicates receiver detection of the electrical idle',
        wire: {
          onMaster: {direction: 'in',  presence: 'required'},
          onSlave:  {direction: 'out', presence: 'required'}
        },
      },
      RXSTATUS: {
        description: 'RX status',
        wire: {
          onMaster: {presence: 'required', direction: 'in'},
          onSlave:  {presence: 'required', direction: 'out'}
        },
      },
      PCLKCHNGOK: {
        description: 'Indicates that PHY is ready for the MACto change PCLK rate',
        wire: {
          onMaster: {presence: 'required', direction:'in'},
          onSlave:  {presence: 'required', direction:'out'}
        },
      },
      M2PMSGBUS: {
        description: 'MAC to PHY message bus',
        wire: {
          onMaster: {presence: 'required', direction: 'out'},
          onSlave:  {presence: 'required', direction: 'in'}
        },
      },
      P2MMSGBUS: {
        description: 'PHY to MAC message bus',
        wire: {
          onMaster: {presence: 'required', direction: 'in'},
          onSlave:  {presence: 'required', direction: 'out'}
        },
      },
      TXDATAK: {
        description: 'data/control switch for the transmit symbols',
        wire: {
          onMaster: {presence: 'required', direction: 'out'},
          onSlave:  {presence: 'required', direction: 'in'}
        },
      },
      TXSTARTBLCK: {
        description: 'This is a way for MAC to label a starting byte of a 128 byte block',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in'}
        },
      },
      RXDATAK: {
        description: 'data/control switch for the receive symbols',
        wire: {
          onMaster: {presence: 'required', direction: 'in'},
          onSlave:  {presence: 'required', direction: 'out'}
        },
      },
      RXDATAVALID: {
        description: 'PHY to MAC data valid',
        wire: {
          onMaster: {presence: 'required', direction: 'in'},
          onSlave:  {presence: 'required', direction: 'out'}
        },
      },
      RXSTARTBLCK: {
        description: 'This is a way for PHY to label a starting byte of a 128 byte block',
        wire: {
          onMaster: {direction: 'in' },
          onSlave:  {direction: 'out'}
        },
      },
      TXCOMP: {
        description: 'TX compliance, sets the running disparity to negative when transmitting PCI Express compliance pattern',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in'}
        },
      },
      TXSYNCHDR: {
        description: 'Provides a sync header  for PHY to use in the next 130b block',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in'}
        },
      },
      RXSYNCHDR: {
        description: 'Provides a sync header  for MAC to use in the next 130b block',
        wire: {
          onMaster: {direction: 'in'},
          onSlave:  {direction: 'out'}
        },
      },
      ENCDECBYPASS: {
        description: '8b/10b bypass',
        wire: {
          onMaster: {direction: 'out'},
          onSlave:  {direction: 'in'}
        },
      },
      RXPRESETHINT: {
        description: 'Provides the RX preset hint to the receiver',
        wire: {
          onMaster: {width: 3, direction: 'out'},
          onSlave:  {width: 3, direction: 'in'}
        },
      },
      LEFFM: {
        description: 'Link Equalization Feedback Figure of Merit value',
        wire: {
          onMaster: {width: 1, direction: 'in'},
          onSlave:  {width: 1, direction: 'out'}
        },
      },
      LEFDC: {
        description: 'Link Equalization Feedback Direction Change',
        wire: {
          onMaster: {width: 1, direction: 'in'},
          onSlave:  {width: 1, direction: 'out'}
        },
      },
      INVALIDREQ: {
        description: 'Indication that requested TX EQ setting was out of range',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
/*
      RXSTARTBHIGH: {
        description: 'PLDA controller specific signal, used at 16 GT/s only, when PIPE interface is 64 bits wide. Valid when RXSTARTBLOCK is valid, and indicates if block starts on lower (0) or higher (1) 32 bits of RXDATA',
        wire: {
          onMaster: {direction: 'in'},
          onSlave:  {direction: 'out'}
        },
      },
      PLLRATE: {
        description: 'PLDA controller specific signal, seem to be the same as PCLKRATE. Only used when PCLK is an input to the PHY',
        wire: {
          onMaster: {direction:'in'},
          onSlave:  {direction:'out'}
        },
      },
      PLLACK: {
        description: 'PLDA controller specific signal, PCLKRATE change acknowledge. Only used when PCLK is an input to the PHY',
        wire: {
          onMaster: {direction: 'in'},
          onSlave:  {direction: 'out'}
        },
      },
*/
      RXEIDETECTDISABLE: {
        description: 'Asynchronously disables the RX Electrical Idle detect logic',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      TXCOMMONMODEDISABLE: {
        description: 'Asynchronously disables the transmitter DC common mode logic',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      RXEQTRAINING: {
        description: 'RX to bypass normal operation to perform equalization training. USB only.',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      TXONESZEROS: {
        description: 'Used to instruct the receiver to bypass normal operation to perform equalization training. USB only.',
        wire: {
          onMaster: {width: 1, direction: 'out'},
          onSlave:  {width: 1, direction: 'in'}
        },
      },
      TXPATTERN: {
        description: 'Controls which pattern the PHY sends. SATA only.',
        wire: {
          onMaster: {width: 2, direction: 'out'},
          onSlave:  {width: 2, direction: 'in'}
        },
      },
      ALIGNDETECT: {
        description: 'Indicates receiver detection of an Align. SATA only.',
        wire: {
          onMaster: {width: 1, direction: 'in'},
          onSlave:  {width: 1, direction: 'out'}
        },
      },
    },
  },
}
