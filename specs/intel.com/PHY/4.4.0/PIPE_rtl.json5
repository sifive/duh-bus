{
  abstractionDefinition: {
    vendor: 'intel.com',
    library: 'PHY',
    name: 'PIPE_rtl',
    version: '4.4.0',
    busType: {
      vendor: 'intel.com',
      library: 'PHY',
      name: 'PIPE',
      version: '4.4.0',
    },
    ports: {
         CLK: {
            description: 'Used to generate the bit-rate clock for the PHY TX and RX',
           wire: {
              qualifier: {
                isClock: 'true',
              },
              onMaster: {direction:'in',
                         width: 1},
              onSlave: {direction:'in',
                        width: 1},
              requiresDriver: 'true',
            },
         },
        PCLK: {
            description: 'Parallel interface clock',
            wire: {
              qualifier: {
                isClock: 'true',
              },
              onMaster: {direction:'in',
                         width: 1},
              onSlave: {direction:'out',
                        width: 1},
              requiresDriver: 'true',
            },
         },

// PIPE Common to all lanes


       RESETN: {
          description: 'Resets the transmitter and receiver.',
          wire: {
            onMaster: {direction:'out',
                       width: 1},
            onSlave: {direction:'in',
                      width: 1}
          },
       },
       POWERDOWN: {
          description: 'Forces TX output to electrical idle',
          wire: {
            onMaster: {direction:'out',
                       width: 2},
            onSlave: {direction:'in',
                      width: 2}
          },
       },
       RATE: {
          description: 'Link signalling rate',
          wire: {
            onMaster: {direction:'out',
                       width: 2},
            onSlave: {direction:'in',
                      width: 2}
          },
       },
       TXMARGIN: {
          description: 'Selects transmitter voltage level',
          wire: {
            onMaster: {direction:'out',
                       width: 3},
            onSlave: {direction:'in',
                      width: 3}
          },
       },
       TXSWING: {
          description: 'Transmitter voltage swing level',
          wire: {
            onMaster: {direction:'out',
                       width: 1,
                       presence:'optional'},
            onSlave: {direction:'in',
                      width: 1,
                      presence:'optional'}
          },
       },
       BLKALNCTRL: {
          description: 'Block align control, controls whether the PHY performs block alignment',
          wire: {
            onMaster: {direction:'out',
                       width: 1},
            onSlave: {direction:'in',
                      width: 1}
          },
       },
       WIDTH: {
          description: 'Controls the PIPE datapath width',
          wire: {
            onMaster: {direction:'out',
                       width: 2},
            onSlave: {direction:'in',
                      width: 2}
          },
       },
       PCLKRATE: {
          description: 'Controls the PIPE PCLK rate',
          wire: {
            onMaster: {direction:'out',
                       width: 3,
                       presence:'optional'},
            onSlave: {direction:'in',
                      width: 3,
                      presence:'optional'}
          },
       },

// Per-lane

       TXDATA: {
          description: 'Parallel data input bus',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       TXDATAVALID: {
          description: 'Parallel data valid signal',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       RXDATA: {
          description: 'Parallel data output bus',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       PHYMODE: {
          description: 'PHY operating mode',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       SRISEN: {
          description: 'Used to tell the PHY to configure itselff to support SRIS ',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       TXDETRXLPBK: {
          description: 'Used to tell the PHY to begin receiver detection or loopback ',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       TXELECIDLE: {
          description: 'Forces TX output to electrical idle',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       RXTERM: {
          description: 'Controls presence of receiver terminations',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       RXSTANDBY: {
          description: 'Controls whether the PHY RX is active when the PHY is in P0 or POs',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       RXPOLARITY: {
          description: 'Tells PHY to invert the received data polarity',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       RXSTANDBYST: {
          description: 'Indicateds PHY RX Standby state',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
       PCLKCHNGACK: {
          description: 'Asserted by the MAC when a PCLK rate change is complete and stable',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       ASYNCPWRCHNGACK: {
          description: 'After the PHY asserts PhyStatus, the MAC responds with this',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       RXVALID: {
          description: 'Parallel data valid signal',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       PHYSTATUS: {
          description: 'Used to communicate completion of several PHY functions',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       RXELECIDLE: {
          description: 'Indicates receiver detection of the electrical idle',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       RXSTATUS: {
          description: 'RX status',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       PCLKCHNGOK: {
          description: 'Indicates that PHY is ready for the MACto change PCLK rate',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       M2PMSGBUS: {
          description: 'MAC to PHY message bus',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       P2MMSGBUS: {
          description: 'PHY to MAC message bus',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       TXDATAK: {
          description: 'data/control switch for the transmit symbols',
          wire: {
            onMaster: {direction:'out'},
            onSlave: {direction:'in'}
          },
       },
       TXSTARTBLCK: {
          description: 'This is a way for MAC to label a starting byte of a 128 byte block',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       RXDATAK: {
          description: 'data/control switch for the receive symbols',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       RXDATAVALID: {
          description: 'PHY to MAC data valid',
          wire: {
            onMaster: {direction:'in'},
            onSlave: {direction:'out'}
          },
       },
       RXSTARTBLCK: {
          description: 'This is a way for PHY to label a starting byte of a 128 byte block',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
       TXCOMP: {
          description: 'TX compliance, sets the running disparity to negative when transmitting PCI Express compliance pattern',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       TXSYNCHDR: {
          description: 'Provides a sync header  for PHY to use in the next 130b block',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       RXSYNCHDR: {
          description: 'Provides a sync header  for MAC to use in the next 130b block',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
       ENCDECBYPASS: {
          description: '8b/10b bypass',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       RXPRESETHINT: {
          description: 'Provides the RX preset hint to the receiver',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
       LEFFM: {
          description: 'Link Equalization Feedback Figure of Merit value',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
       LEFDC: {
          description: 'Link Equalization Feedback Direction Change',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
      INVALIDREQ: {
          description: 'Indication that requested TX EQ setting was out of range',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
      RXSTARTBHIGH: {
          description: 'PLDA controller specific signal, used at 16 GT/s only, when PIPE interface is 64 bits wide. Valid when RXSTARTBLOCK is valid, and indicates if block starts on lower (0) or higher (1) 32 bits of RXDATA',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
      PLLRATE: {
          description: 'PLDA controller specific signal, seem to be the same as PCLKRATE. Only used when PCLK is an input to the PHY',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
      PLLACK: {
          description: 'PLDA controller specific signal, PCLKRATE change acknowledge. Only used when PCLK is an input to the PHY',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
      RXEIDETECTDISABLE: {
          description: 'Asynchronously disables the RX Electrical Idle detect logic',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
      TXCOMMONMODEDISABLE: {
          description: 'Asynchronously disables the transmitter DC common mode logic',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
      RXEQTRAINING: {
          description: 'RX to bypass normal operation to perform equalization training. USB only.',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
      TXONESZEROS: {
          description: 'Used to instruct the receiver to bypass normal operation to perform equalization training. USB only.',
          wire: {
            onMaster: {direction:'out',
                       presence:'optional'},
            onSlave: {direction:'in',
                      presence:'optional'}
          },
       },
      TXPATTERN: {
          description: 'Controls which pattern the PHY sends. SATA only.',
          wire: {
            onMaster: {direction:'out',
                       width: 2,
                       presence:'optional'},
            onSlave: {direction:'in',
                      width: 2,
                      presence:'optional'}
          },
       },
      ALIGNDETECT: {
          description: 'Indicates receiver detection of an Align. SATA only.',
          wire: {
            onMaster: {direction:'in',
                       presence:'optional'},
            onSlave: {direction:'out',
                      presence:'optional'}
          },
       },
    },
  },
}
